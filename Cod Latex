\documentclass[12pt, letterpaper]{article}
\title{The map of Computer Science}
\author{Petcu George Iulian}
\usepackage{tabularx}
\usepackage{minted}

\begin{document}
\maketitle
\tableofcontents



\section{Intro}


\textbf{Computer Science} is the study of computers, computing processes, and information systems. It is a dynamic and ever-evolving field that plays a central role in modern society, powering everything from smartphones and websites to space exploration and artificial intelligence. At its core, Computer Science combines theoretical principles with practical problem-solving skills to design, analyze, and build software and hardware systems.
Down below, we will discover different subfields from Computer Science and explore it's purpose.


\section{Algorithms and Data Structures}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage

\section{Programming Languages}

\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage

\section{Computer Arhitecture}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage
\section{Operating Systems and Networks}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage

\section{Software Engineering}

\subsection*{Theory}
Software engineering is the branch of computer science that deals with applying engineering principles to the development and maintenance of software systems. Its theoretical foundations come from computer science, applied mathematics, and systems science. Core elements include the software life cycle, development methodologies (such as Waterfall, Agile, DevOps), quality models, formal specification, and validation/verification.

\subsection*{Experiment}
Experimental research in software engineering involves the empirical evaluation of software processes, techniques, and tools. This includes case studies, controlled experiments, and quantitative analysis to determine which practices produce more reliable, efficient, and maintainable software. Examples include comparing the effectiveness of Test-Driven Development (TDD) versus traditional development, or analyzing the impact of open-source code on team collaboration.

\subsection*{Design}
Software design is a crucial stage in developing information systems, where the overall architecture of the application and the internal organization of components are defined. Its main goal is to translate functional and non-functional requirements into a clear, coherent, and extensible structure.

The design process includes:
\begin{itemize}
  \item \textbf{Architectural Design} – defines the overall system structure and how components interact. Examples of architectures include monolithic, layered, service-oriented (SOA), microservices, and event-driven.
  \item \textbf{Detailed Design} – focuses on the implementation of individual modules using design patterns such as Singleton, Factory, Observer, or MVC (Model-View-Controller).
\end{itemize}

A key tool in design is \textbf{UML (Unified Modeling Language)}, a standardized graphical language used to visualize, specify, construct, and document software system elements. UML provides a suite of diagrams that address different system perspectives:
\begin{itemize}
  \item \textbf{Class diagrams} – describe the static structure of the system using classes, attributes, methods, and relationships.
  \item \textbf{Sequence diagrams} – highlight object interactions over time, useful for concrete scenarios.
  \item \textbf{Use case diagrams} – illustrate functional requirements from the user's perspective and their interactions with the system.
  \item \textbf{Activity diagrams} – model control and activity flows, useful for process logic.
  \item \textbf{State diagrams} – show how an object changes state in response to events.
  \item \textbf{Component and deployment diagrams} – describe the physical structure of the application and its runtime environment.
\end{itemize}

Using UML improves documentation clarity, facilitates effective team communication, and ensures a better understanding of system requirements and proposed solutions. It is technology-agnostic, making it suitable for a wide variety of software projects, from embedded applications to large distributed systems.

\subsection*{Relations with other subfields}
Software engineering is closely connected to other areas of computer science. For example:
\begin{itemize}
  \item \textbf{Programming}: The foundation of software development relies on programming concepts, languages, and paradigms.
  \item \textbf{Distributed systems}: Require advanced software engineering practices to manage complexity and scalability.
  \item \textbf{Artificial Intelligence}: Software engineering is crucial for integrating AI systems into real-world applications.
  \item \textbf{Human-Computer Interaction (HCI)}: User-centered design is essential for modern software success.
\end{itemize}

\subsection*{Major problems}
Key challenges in software engineering include:
\begin{itemize}
  \item \textbf{Managing complexity}: Large systems become difficult to understand and maintain.
  \item \textbf{Software quality}: Ensuring reliability, security, and performance in a competitive environment.
  \item \textbf{Evolving requirements}: User and market needs change rapidly.
  \item \textbf{Cost and time estimation}: A notoriously unpredictable aspect of software projects.
\end{itemize}

\subsection*{Influential figures}
Some of the most important pioneers in the field include:
\begin{itemize}
  \item \textbf{Margaret Hamilton} – Led the development of Apollo mission software; helped popularize the term "software engineering."
  \item \textbf{Barry Boehm} – Author of the Spiral Model and promoter of cost-benefit analysis in software development.
  \item \textbf{Fred Brooks} – Author of the classic book \emph{The Mythical Man-Month}, which highlights the difficulties of scaling software teams.
  \item \textbf{Grady Booch} – One of the creators of UML and advocate of object-oriented methodologies.
\end{itemize}

\subsection*{Key forums}
The software engineering community has several essential knowledge-sharing forums:
\begin{itemize}
  \item \textbf{Conferences}: ICSE (International Conference on Software Engineering), FSE (Foundations of Software Engineering), ASE (Automated Software Engineering).
  \item \textbf{Journals}: IEEE Transactions on Software Engineering, Empirical Software Engineering, Journal of Systems and Software.
  \item \textbf{Online communities}: Stack Overflow, GitHub, Reddit (e.g., \texttt{r/softwareengineering}).
\end{itemize}

\newpage
\section{Databases and Information Retrieval}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage
\section{Artificial Intelligence and Robotics}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage
\section{Graphics}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage

\section{Human–Computer Interaction}

\subsection*{Theory}
Theoretical foundations of HCI include:
\begin{itemize}
  \item Cognitive models (e.g., GOMS, Norman's Action Theory)
  \item Activity Theory for understanding complex interaction contexts
  \item Empirical laws (e.g., Fitts' Law, Hick's Law)
  \item User-Centered Design principles and methodologies
\end{itemize}

\subsection*{Experiment}
Experimental methods in HCI involve:
\begin{itemize}
  \item Usability testing of interactive systems
  \item Field studies (observations, contextual interviews)
  \item Controlled experiments on user performance and behavior
  \item A/B testing in web and mobile applications
\end{itemize}

\subsection*{Design}
Design activities in HCI focus on:
\begin{itemize}
  \item Rapid prototyping (low and high fidelity)
  \item Heuristic evaluation (e.g., Nielsen’s heuristics)
  \item UI/UX design with wireframes, storyboards, and personas
  \item Participatory and inclusive design approaches
\end{itemize}

\subsection*{Relations with other subfields}
\begin{itemize}
  \item \textbf{Artificial Intelligence} – Adaptive interfaces, intelligent agents
  \item \textbf{Computer Graphics} – Visual interfaces, AR/VR systems
  \item \textbf{Software Engineering} – UI frameworks, design patterns (e.g., MVC)
  \item \textbf{Networking} – Interactive distributed and collaborative systems
  \item \textbf{Cognitive Psychology} – Human behavior modeling and interface response
\end{itemize}

\subsection*{Major problems}
\begin{itemize}
  \item \textbf{Accessibility} – How to design for users with disabilities?
  \item \textbf{Natural interaction} – How to achieve intuitive voice, gesture, and eye-based interaction?
  \item \textbf{Virtual and Augmented Reality} – How to minimize discomfort while maximizing immersion?
  \item \textbf{Ethics in HCI} – How to avoid manipulative design (dark patterns)?
  \item \textbf{Explainability} – How to design interfaces that make AI systems transparent?
\end{itemize}

\subsection*{Influential figures}
\begin{itemize}
  \item \textbf{Donald Norman} – Author of “The Design of Everyday Things”
  \item \textbf{Ben Shneiderman} – Introduced direct manipulation and HCI principles
  \item \textbf{Stuart Card} – Co-creator of GOMS model for user interaction
  \item \textbf{Alan Dix} – Renowned researcher in emerging interaction paradigms
  \item \textbf{Yvonne Rogers} – Expert in interaction design and ubiquitous computing
\end{itemize}

\subsection*{Key forums}
\begin{itemize}
  \item \textbf{Major international conferences:}
  \begin{itemize}
    \item CHI – ACM Conference on Human Factors in Computing Systems
    \item UIST – ACM Symposium on User Interface Software and Technology
    \item IUI – International Conference on Intelligent User Interfaces
  \end{itemize}
  \item \textbf{Leading journals:}
  \begin{itemize}
    \item ACM Transactions on Computer–Human Interaction (TOCHI)
    \item Human–Computer Interaction Journal (Taylor \& Francis)
  \end{itemize}
  \item \textbf{Local dimension (University of the West, Timișoara):}
  \begin{itemize}
    \item HCI research groups within the Department of Computer Science, FMI, UVT
    \item Courses such as “Human–Computer Interaction”, “User Experience Design” offered in the Informatics program
  \end{itemize}
\end{itemize}


\newpage
\section{Computational Science}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage
\section{Organizational Informatics}

\subsection*{Theory}
\textit{Organizational Informatics}, a term popularized by \emph{Peter J. Denning} (1989), investigates how
information systems underpin workflow and decision-making in companies.  
Business rules (e.g.\ “purchases above €10 k require CFO approval”) are translated into propositional-logic
formulas that are conjoined into a single expression \(\Phi\).  
\(\Phi\) is converted to \emph{Conjunctive Normal Form} (CNF) by eliminating implications, pushing negations
inward, and distributing disjunction over conjunction.  
Consistency is then checked with three classical SAT algorithms:

\begin{itemize}
  \item \textbf{Resolution} — iteratively adds resolvents until contradiction or saturation;
  \item \textbf{Davis–Putnam} (DP) — removes variables through systematic resolution steps;
  \item \textbf{DPLL} — recursive backtracking with unit-propagation pruning.
\end{itemize}

\vspace{0.5em}
\noindent\textbf{Sample CNF file (DIMACS)} — excerpt (mapping: \(S{=}1,\,C{=}5,\dots\)):
\begin{minted}[fontsize=\small]{text}
p cnf 10 7
-1  5    0        % ¬S ∨ C
-1  4    0        % ¬S ∨ D
 2  4    0        %  M ∨ D
-6 -2  4 0        % ¬S2 ∨ ¬M ∨ D
-9  6    0        % ¬R ∨ J
-10 7    0        % ¬T ∨ K
-8 -2   0        % ¬I ∨ ¬M
\end{minted}

\subsection*{Experiment}
Two rule sets were evaluated with the Java implementation at
\url{https://github.com/claudiucalugaru97/MPIProiect}:

\begin{description}
  \item[Test 1 — R1 (minimal scenario)] \hfill\\
    Variables: \(S,M,D,C\).  
    Clauses: \(\neg S\!\lor\!C\), \(\neg S\!\lor\!D\), \(M\!\lor\!D\).  
    \textbf{Results}: SAT — Resolution 2 ms, DP 2 ms, DPLL 1 ms.
  \item[Test 2 — R2 (extended scenario)] \hfill\\
    Additional variables: \(S2,J,K,R\).  
    New clauses: \(\neg S2\!\lor\!\neg M\!\lor\!D\), \(\neg R\!\lor\!J\), \(\neg T\!\lor\!K\).  
    \textbf{Results}: SAT — Resolution 65 ms, DP 60 ms, DPLL 15 ms (redundant director rules flagged).
\end{description}

\subsection*{Design}
\begin{enumerate}
  \item \textbf{Rule extraction}: identify organisational policies.
  \item \textbf{Logic translation}: e.g.\ \(S \rightarrow C\).
  \item \textbf{CNF conversion}: e.g.\ \(S\!\rightarrow\!C \;\Rightarrow\; \neg S \lor C\).
  \item \textbf{SAT solving}: run the CNF with Resolution, DP, DPLL and benchmark against \texttt{Sat4j}.
  \item \textbf{Analysis}: inspect SAT/UNSAT status and highlight redundant clauses.
\end{enumerate}

\subsection*{Relations with other subfields}
\vspace{-0.3em}
\begin{itemize}
  \item \textbf{Algorithms}: Resolution and DPLL are canonical SAT-solver algorithms.
  \item \textbf{Software Engineering}: rule validation integrates into CI pipelines.
  \item \textbf{Databases}: rules are versioned alongside transactional data.
  \item \textbf{Artificial Intelligence}: SAT solving shares techniques with logical reasoning systems.
\end{itemize}

\subsection*{Major problems}
\begin{itemize}
  \item \textbf{NP-complete}: worst-case exploration grows exponentially.
  \item \textbf{Scalability}: Resolution slows on large clause sets.
  \item \textbf{Redundancy}: overlapping rules (e.g.\ manager vs.\ director) are hard to spot manually.
  \item \textbf{Max-SAT}: when \(\Phi\) is UNSAT, a Max-SAT relaxation pinpoints the smallest set of rules to drop.
  \item \textbf{Logical expressiveness}: propositional logic cannot state complex arithmetic constraints.
\end{itemize}

\subsubsection*{Implementation notes}
\begin{itemize}
  \item \textbf{Resolution}: exhaustive saturation until contradiction or fix-point.
  \item \textbf{Davis–Putnam}: variable elimination while preserving satisfiability.
  \item \textbf{DPLL}: backtracking search with unit propagation and intelligent backjumping.
  \item \textbf{Sat4j}: used solely as a performance baseline against the classic in-house implementations.
\end{itemize}

\subsection*{Influential figures}
\begin{itemize}
  \item \textbf{Martin Davis, George Logemann \& Donald Loveland} — DPLL search procedure (1962).
  \item \textbf{J. Alan Robinson} — Resolution rule (1965).
  \item \textbf{Peter J. Denning} — framed “Organizational Informatics” (1989).
  \item \textbf{João P. Marques-Silva \& Karem A. Sakallah} — clause-learning optimisations.
  \item \textbf{Armin Biere} — drove SAT competitions and co-edited the \emph{Handbook of Satisfiability}.
\end{itemize}

\subsection*{Key forums}
\begin{itemize}
  \item \textbf{International SAT Conference} — cutting-edge SAT algorithms.
  \item \textbf{RuleML \& RR Symposium} — business-rule modelling and validation.
  \item \textbf{International Conference on Information Systems (ICIS)} — enterprise case studies.
  \item \textbf{Academy of Management – OCIS division} — digital transformation of organisational processes.
  \item \textbf{Sat4j GitHub community} — support and examples for integrating SAT solvers in Java apps.
\end{itemize}

\newpage

\section{Bioinformatics}
\subsection*{Theory}

\subsection*{Experiment}

\subsection*{Design}

\subsection*{Relations with other subfields}

\subsection*{Major problems}

\subsection*{Influencial figures}

\subsection*{Key forums}

\newpage
\end{document}
